[general]
# run in headless mode (true/false)
# this disables GUI, detections are only logged to console and saved
# Set to True to enable headless mode
headless = False
# Default confidence threshold (above which to alert)
default_conf_threshold = 0.7
# Default model variant to use
default_model_variant = yolov8m

[input]
use_webcam = false
webcam_index = 0

[stream]
# Stream URL to read the detection from
# (Default RTMP stream URL)
stream_url = rtmp://127.0.0.1:1935/live/stream

[detection]
# Draw rectangles around detection areas (True/False)
draw_rectangles = True
# Save full-frame images when detections occur (True/False)
save_full_frames = True
# Image format for full-frame images (jpg or png)
full_frame_image_format = jpg
# Save detection areas as separate images (True/False)
save_detection_areas = True
# Image format for detection area images (jpg or png)
detection_area_image_format = png
# The number of pixels to expand the bounding box on each side when saving detection area images
detection_area_margin = 100
# Directory settings
# Set this to True to use the environment-specified save directory
use_env_save_dir = True 
# Name of the environment variable, if set to `true`
env_save_dir_var = YOLO_SAVE_DIR
# Directory to save detection images if we're not using an env var
default_save_dir = ./yolo_detections/
# Directory to use as a fallback if the environment-specified directory isn't available
fallback_save_dir = ./yolo_detections/
# Create date-based sub-directories (detections_directory/year/month/day/)
create_date_subdirs = True
# Retry delay if stream cannot be connected
# Delay in seconds before retrying to connect to the stream
retry_delay = 2
# Maximum number of retries to connect to the stream
max_retries = 10
# Rescale the input frames (True/False)
rescale_input = False
# Target height for rescaling the frames if RESCALE_INPUT is enabled
target_height = 1080
# Toggle denoising on/off (True/False)
denoise = False
# Use a custom processing FPS (i.e., drop the frame rate for the inbound material)
use_process_fps = False
# If custom processing FPS is enabled, processing frames per second
process_fps = 15
# Timeout in seconds, increase for handling larger bitrate streams
timeout = 60
# Cooldown period for TTS announcements in seconds
tts_cooldown = 2 

[performance]
# 'frame_queue_size' defines the maximum frame queue size when saving detections.
# Too high of a value may introduce lag or dropouts while saving.
# Set to 0 or negative for unlimited queue size.
# 10 or 20 might be a good starter for many.
frame_queue_size = 100

[logging]
enable_detection_logging_to_file = True
log_directory = ./logs
log_file = logging.log
detection_log_file = detections.log
access_log_file = access.log

[webserver]
enable_webserver = true
# webserver_host = 0.0.0.0
# set to 127.0.0.1 if you want it to localhost (not available outside of your computer):
webserver_host = 127.0.0.1
webserver_port = 5000
# Set your desired max FPS for the web server's output
# Note that especially on higher resolutions, high FPS's may introduce
# computational overhead where the stream starts to lag.
webserver_max_fps = 10
# interval checking for webUI connections true/false
interval_checks = true
# check interval in seconds for active connections
check_interval = 15

[webui]
# Web UI Configuration
# Aggregate all detections within X seconds to a singular field
# This avoids clutter in the web UI
webui_cooldown_aggregation = 30
# How many detections until they show up in **bold**
webui_bold_threshold = 10
